#!/usr/bin/env python

import os
import sys
import subprocess
import tempfile
import re

class YogiMPIWrapper(object):
    prefixDir = "@INSTALLDIR@"
    f90Compiler = "@SERIALF90COMPILER@"

    fExtensions = [ '.f', '.f90', '.for', '.f77', '.ftn', '.f95', '.f03' ]
    notLinkingOpts = [ '-c', '-S', '-E', '-M', '-MM' ]
    
    def _isFortranSource(self, inputFile):
        for fExt in YogiMPIWrapper.fExtensions:
            if inputFile.lower().endswith(fExt):
                return True
        return False
        
    def __init__(self):
        self.argArray = list(sys.argv)
        self.sourceDir = ''
        self.sourceFile = None
        self.sourceLocation = None
        self.isLinking = True
        self.newFile = None
        self.newPath = None
        self.namesOutput = False
        self.doWrap()
        
    def setFile(self, inputFile, argLocation):
        if self.sourceFile is not None:
            raise ValueError("Error: source file is already set to " +\
                              self.sourceFile)
        self.sourceDir = os.path.dirname(inputFile)
        self.sourceFile = os.path.basename(inputFile)
        self.sourceLocation = argLocation

    def _getFullSourcePath(self):
        if self.sourceDir:
            return self.sourceDir + '/' + self.sourceFile
        else:
            return self.sourceFile

    def _stripExtension(self, filename):
        for fExt in YogiMPIWrapper.fExtensions:
            if filename.lower().endswith(fExt):
                return filename[:-(len(fExt))] 
        return filename 

    def _getExtension(self, filename):
        for fExt in YogiMPIWrapper.fExtensions:
            if filename.lower().endswith(fExt):
                return filename[-(len(fExt)):]
        return filename

    def _changeArgs(self):
        self.argArray[0] = YogiMPIWrapper.f90Compiler
        if self.sourceFile:
            self.preprocessFile()
            self.argArray[self.sourceLocation] = self.newPath
            self.argArray.insert(self.sourceLocation,
                                 '-I' + YogiMPIWrapper.prefixDir + '/include')
            if not self.namesOutput and not self.isLinking:
                objectName = self._stripExtension(self.sourceFile) + '.o'
                self.argArray.append('-o ' + objectName)
        if self.isLinking:
             self.argArray.append('-L' + YogiMPIWrapper.prefixDir + '/lib' +\
                                  ' -lyogimpi')

    def _getCallString(self):
        callString = ''
        for anArg in self.argArray:
            callString += anArg + ' '
        return callString
        
    def _printCommand(self):
        sys.stdout.write(self._getCallString() + '\n')

    def preprocessFile(self):
        fileHandle = open(self._getFullSourcePath(), 'r')
        rawFile = fileHandle.readlines()
        fileExtension = self._getExtension(self.sourceFile)
        self.newFile, self.newPath = tempfile.mkstemp(prefix='yogiF_',
                                                      suffix=fileExtension)
        for i in range(len(rawFile)):
            rawFile[i] = re.sub(r"^(\s)*include(\s)*(\"|')mpif.h(\"|')",
                                '#include "mpif.h"', rawFile[i],
                                flags=re.IGNORECASE)
            os.write(self.newFile, rawFile[i])
        os.close(self.newFile)
 
    def doWrap(self):
        for i in range(len(self.argArray)):
            anOpt = self.argArray[i]
            if anOpt in YogiMPIWrapper.notLinkingOpts:
                # See if this command is linking, which means we have to add 
                # library flags as well as extra include flags.
                self.isLinking = False
            elif self._isFortranSource(anOpt):
                # Find the source file to preprocess, if any.
                self.setFile(anOpt, i)
            elif anOpt == '-o':
                # If there was an output file name, use what was specified.
                self.namesOutput = True

        self._changeArgs()
        subprocess.call(self._getCallString(), shell=True)
        os.remove(self.newPath)
 
if __name__ == "__main__":
    thisWrapper = YogiMPIWrapper()
