#!/usr/bin/env python

import os
import sys
import time
import subprocess
import tempfile
import filecmp
import re

# MPI type constants currently supported in Fortran.
@MPI_TYPE_CONSTANTS@

# All other MPI constants currently supported in Fortran.
@MPI_CONSTANTS@

# MPI objects currently supported in Fortran.
@MPI_OBJECTS@

# MPI time functions, which are the only functions to return a non-integer
# value.
mpiTimeFunctions = [ 'MPI_Wtime', 'MPI_Wtick' ]

# MPI functions currently supported in Fortran.
@MPI_FUNCTIONS@

class YogiMPIWrapper(object):

    # These options indicate we won't be linking MPI libraries, so Yogi should
    # not force linking flags on the command line if they are present.
    notLinkingOpts = [ '-c', '-S', '-E', '-M', '-MM' ]
    extensions = { 'C': ['.c'],
                   'C++': ['.c', '.cpp', '.hpp', '.cxx', '.cc', '.i'],
                   'Fortran': [ '.f', '.f90', '.for', '.f77', '.ftn', '.f95',
                                '.f03' ]
                 }

    fixedExts = [ '.f77', '.f', '.for' ]
    f77Comments = [ 'c', 'C', '*' ]
    # The regular expression to find instances of use mpi in a Fortran file.
    # This is a newer Fortran 90 style that deprecates the "include 'mpif.h'"
    # We look for both.
    useMPIRegEx = re.compile(r"([\s]*)use[\s]+mpi([\s,])", re.IGNORECASE)
    # Regular expression to find instances of command line preprocessor
    # definitions which have quoted values.

    def __init__(self, prefixDir, compilerName, compilerLang):
        global mpiConstants
        global mpiType_Constants
        global mpiFunctions
        global mpiTimeFunctions
        global mpiObjects
        # The location of the YogiMPI installation.
        self.prefixDir = prefixDir
        # The name of the real system compiler YogiMPI will reference.
        self.compilerName = compilerName
        # The language of the compiler being called. (C, C++, or Fortran)
        self.compilerLang = compilerLang
        # All of the command line arguments given to the YogiMPI compiler.
        # These are largely passed through to the real compiler, but Yogi does
        # support some directives directly. This list may be modified as Yogi
        # decides what flags to pass down to the system compiler.
        self.argArray = list(sys.argv)
        # Arguments to be passed to the preprocessor by Yogi. Sometimes Yogi
        # must call the preprocessor independently of the real compiler, and
        # it gathers what arguments should be sent.
        self.cppArgs = []
        # Directory of the source code to be compiled.
        self.sourceDir = ''
        # Name of the source file to be compiled.
        self.sourceFile = None
        # The location in the list of command-line arguments where the source
        # file is listed (integer).
        self.sourceArgLocation = None
        # Whether or not this YogiMPI compiler call will require linking. This
        # is determined by command line argument analysis.
        self.isLinking = True
        # When compiling Fortran, the source must sometimes be copied and then
        # altered in a temporary location for compilation. If this happens, the
        # path of this temporary file.
        self.newPath = None
        # Whether or not the user has specified a name for the output file,
        # typically with -o command line argument.
        self.namesOutput = False
        # Whether or not Yogi does only preprocessing and stops sending
        # the file to the compiler.
        self.preprocessOnly = False
        # Whether or not we care about line restrictions in Fortran. Normally
        # there are compiler default line limits, or the user controls them
        # with a flag. If this is True, disable line limits for fixed and
        # free-form source regardless of user/compiler choices.
        self.disableLineLength = False
        # Encapsulate the global variables for each into a class attribute.
        self.mpi_constants = mpiConstants
        self.mpi_type_constants = mpiType_Constants
        self.mpi_objects = mpiObjects
        self.mpi_functions = mpiFunctions
        self.mpi_time_functions = mpiTimeFunctions
        # Stores compiled regular expressions for MPI type constants in Fortran.
        self.const_type_regexes = []
        # Stores compiled regular expressions for MPI constants in Fortran.
        self.const_regexes = []
        # Stores compiled regular expressions for MPI functions in Fortran.
        self.func_regexes = []
        # Stores compiled regular expressions for MPI time functions in Fortran.
        self.time_regexes = []
        # The return code Yogi will pass on exit.
        self.rc = 0

        # Diagnostic options Yogi directly understands.
        diagOptions = [ '-h', '-help', '-show', '--help', '-compile_info', '-link_info' ]
        # Fortran preprocessing options Yogi directly understands.
        fortranOptions = [ '--yogi-preprocess-only' ]

        # Obtain the debug level set by the user. The default is zero (off).
        self.debug = int(os.environ.get('YMPI_COMPILER_DEBUG', 0))

        # Check if the user wants fixed-length Fortran lines.
        if self.compilerLang == 'Fortran':
            lLengthEnv = 'YMPI_OVERRIDE_LINE_LENGTH'
            if lLengthEnv in os.environ:
                self.disableLineLength = bool(int(os.environ.get(lLengthEnv)))

        diagMode = False

        if "--no-yogi" in self.argArray:
            # This command makes Yogi remain inert and pass through all
            # commands to the system compiler.
            self.passThrough()
            return

        for anArg in self.argArray:
            if anArg in diagOptions:
                diagMode = True
            elif self.compilerLang == 'Fortran' and anArg in fortranOptions:
                self.preprocessOnly = True
            if anArg.startswith(('-D', '-I')):
                self.cppArgs.append(anArg)
        if self.disableLineLength:
            if self.compilerName == 'gfortran':
                self.argArray.append('-ffixed-line-length-none')
                self.argArray.append('-ffree-line-length-none')
        if diagMode:
            self._showCompilerString()
        else:
            self._createRegExes()
            self._doWrap()

    def getRC(self):
        return self.rc

    def _checkAssignQuotes(self, anArg):
        (variable, sep, value) = anArg.partition('=')
        retVal = variable + sep
        if value.startswith('"') and value.endswith('"'):
            retVal += r'"\"' + value[1:-1] + r'\""'
        else:
            retVal = anArg
        return retVal

    def _isSourceType(self, inputFile, language, curIndex=0):
        if curIndex > 0:
            prevArg = self.argArray[curIndex-1]
        else:
            prevArg = None
        for anExt in YogiMPIWrapper.extensions[language]:
            if inputFile.lower().endswith(anExt) and prevArg != '-o':
                return True
        return False

    def _showCompilerString(self):
        self.compString = self.compilerName
        self.compString += ' -I"' + self.prefixDir + '/include" -DYOGIMPI_ENABLED'
        self.compString += ' -L"' + self.prefixDir + '/lib" -lyogimpi'
        print(self.compString)

    def _outputMsg(self, message):
        if self.debug:
            print(message)

    def _buildRegEx(self, aPattern):
        aPattern = aPattern.replace('MPI_', '')
        # Functions require an open parenthesis to follow, or
        # if there is a line continuation just trust that someone
        # put one on the next line.
        # ToDo: Actually do lookahead and find out for that last case.
        regexString = r"(^|=|\s|\(|\)|,|\*|\+)MPI_(" + aPattern +\
                      r')([\s]*\(|[\s]*&$)'
        return re.compile(regexString, re.IGNORECASE)

    ## Creates the regular expressions needed to search and replace MPI
    #  definitions with Fortran files. This is only needed within Fortran as
    #  C and C++ have mpitoyogi.h transformations.
    def _createRegExes(self):
        if self.compilerLang == 'Fortran':
            for aPattern in self.mpi_type_constants:
                aPattern = aPattern.replace('MPI_', '')
                regexString = r"(^|_|=|\s|\(|\)|,|\*|\+)MPI_(" + aPattern +\
                              r')(\s|,|\*|\)|\()'
                self.const_type_regexes.append(re.compile(regexString,
                                                          re.IGNORECASE))
            for aPattern in self.mpi_constants:
                aPattern = aPattern.replace('MPI_', '')
                regexString = r"(^|=|\s|\(|\)|,|\*|\+)MPI_(" + aPattern +\
                              r')(\s|,|\*|\)|\()'
                self.const_regexes.append(re.compile(regexString,
                                                     re.IGNORECASE))
            for aPattern in self.mpi_functions:
                self.func_regexes.append(self._buildRegEx(aPattern))

            for aPattern in self.mpi_time_functions:
                aPattern = aPattern.replace('MPI_', '')
                #self.time_regexes.append(self._buildRegEx(aPattern))
                # Quick fix: for time functions, support non-parentheses
                # matching for edge cases.
                regexString = r"(^|=|\s|\(|\)|,|\*|\+)MPI_(" + aPattern +\
                              r')(\s|,|\*|\)|\()'
                self.time_regexes.append(re.compile(regexString,
                                                    re.IGNORECASE))

    ## Sets the source file and its command-line argument index which Yogi must
    #  compile.
    def setFile(self, inputFile, argLocation):
        self.sourceDir = os.path.dirname(inputFile)
        self.sourceFile = os.path.basename(inputFile)
        self.sourceArgLocation = argLocation

    # Return the path of the source file which Yogi must compile.
    def _getFullSourcePath(self):
        if self.sourceDir:
            return self.sourceDir + '/' + self.sourceFile
        else:
            return self.sourceFile

    # Removes a file's extension and returns only the name.
    def _stripExtension(self, filename):
        for ext in YogiMPIWrapper.extensions[self.compilerLang]:
            if filename.lower().endswith(ext):
                return filename[:-(len(ext))]
        return filename

    # Return only a file's extension.
    def _getExtension(self, filename):
        for ext in YogiMPIWrapper.extensions[self.compilerLang]:
            if filename.lower().endswith(ext):
                return filename[-(len(ext)):]
        return filename

    ## Alters the arguments YogiMPI passes to the system compiler. This is
    #  important for linking, preprocessing, or directives that make YogiMPI
    #  work properly.
    def _changeArgs(self):
        for i, anArg in enumerate(self.argArray):
            if anArg.startswith('-D'):
                # Handle quoted arguments and make sure they're preserved when
                # passing to the system compiler and preprocessor.
                self.argArray[i] = self._checkAssignQuotes(anArg)

        self.argArray[0] = self.compilerName
        if self.sourceFile:
            if self.compilerLang == 'Fortran':
                # Fortran files require preprocssing.
                changedFile = self.preprocessFortran()
                if changedFile:
                    # The file had to be copied and altered, so pass the system
                    # compiler the altered version.
                    self.argArray[self.sourceArgLocation] = self.newPath
                if not self.namesOutput and not self.isLinking:
                    # Explicitly name the output file as some ugly temporary
                    # file name is not what the user expects if object code
                    # is to be produced.
                    objectName = self._stripExtension(self.sourceFile) + '.o'
                    self.argArray.append('-o ' + objectName)
            # Lovingly add Yogi's include directories to the mix.
            self.argArray.insert(self.sourceArgLocation, '-I"' +\
                                 self.prefixDir + '/include" -DYOGIMPI_ENABLED')
        if self.isLinking:
            # Linking is happening, so add Yogi's libdir and library flags.
            self.argArray.append('-L"' + self.prefixDir + '/lib" -lyogimpi')

    ## Return the entire command-line argument string. This string includes
    #  any changes Yogi has made (so-far) to pass down instructions to the
    #  system compiler.
    def _getCallString(self):
        callString = ''
        for anArg in self.argArray:
            callString += anArg + ' '
        return callString

    ## Prints the call string to stdout.
    def _printCommand(self):
        sys.stdout.write(self._getCallString() + '\n')

    def _isFixedForm(self, sourceFile):
        # Automatically assume a .f or .f77 file is fixed-form.
        if self._getExtension(sourceFile).lower() in YogiMPIWrapper.fixedExts:
            return True
        return False

    ## Return whether this is a line to ignore (blank or comment).
    def _isFortranIgnoreLine(self, sourceLine, fixed=False):
        if not sourceLine.strip():
            # Ignore empty lines.
            return True
        if sourceLine.lstrip().startswith('!'):
            # Ignore comment lines for free-form. Unfortunately some pseudo
            # fixed-form codes also have lines that start with this, and it
            # is expected they'll also be treated as comments.
            return True
        elif fixed and sourceLine[0] in YogiMPIWrapper.f77Comments:
            # Ignore comments for fixed-form.
            return True
        if sourceLine.startswith('#'):
            # Ignore preprocessor directives.
            return True
        # All replace items have mpi in it, if not, no need to process line
        if 'mpi' in sourceLine.lower():
            return False
        return True

    ## Handle line-continuation in Fortran, which may require breaking a line
    #  into pieces if we have made it too long.
    #  @arg fileArray The Python list containing lines of the files.
    #  @arg lineNumber The number of the line to check.
    def _checkFixedLine(self, fileArray, lineNumber):
        line = fileArray[lineNumber]
        if len(line.rstrip()) <= 72:
            # Nothing to do here.
            return (lineNumber + 1)

        # Strip off comments coming after valid expression.
        commentStart = line.find('!')
        if commentStart > -1 and line[commentStart - 1] != "\\":
            line = line[:commentStart]
            if len(line.rstrip()) <= 72:
                # If removing the comment fixed length problems, done.
                fileArray[lineNumber] = line.rstrip() + '\n'
                return (lineNumber + 1)

        # Otherwise split the line into two pieces, the second with
        # a continuation character.
        firstPart = line[:72].strip('\n')
        secondPart = '     &' + line[72:].strip('\n')
        fileArray[lineNumber] = firstPart + '\n'
        if (lineNumber + 1) < len(fileArray):
            fileArray.insert(lineNumber + 1, secondPart + '\n')
        else:
            # This was the last line of the file.  Add one more line.
            fileArray.append(secondPart + '\n')
        # Return the bumped up line count.  In any case it's two lines.
        return (lineNumber + 2)

    def _makeTempFilename(self, sourceFile):
        tempStr = ''
        filePath = os.path.abspath(sourceFile)
        here = ''
        for i in range(3):
            filePath, here = os.path.split(filePath)
            tempStr = here + '_' + tempStr
        return tempStr

    ## Calls the system preprocessor (cpp) to yield a fully expanded Fortran
    #  source file. Sometimes this is needed in tricky situations where
    #  Fortran source "includes" another source file that has MPI definitions.
    def _callSystemPreprocessor(self):
        cppString = ''
        for i in range(len(self.cppArgs)):
            anArg = self.cppArgs[i]
            if i > 0:
                cppString += ' '
            cppString += anArg
        cppString += " " + self._getFullSourcePath()
        try:
            fileExtension = self._getExtension(self.sourceFile)
            newFile, newPath = tempfile.mkstemp(prefix='yogiF_',
                                                suffix=fileExtension)
            os.close(newFile)
            cppString += " " + newPath
            subprocess.check_call("cpp -P -traditional-cpp " + cppString,
                                  shell=True)
            if filecmp.cmp(self._getFullSourcePath(), newPath):
                # The files are the same, no need to do anything.
                os.remove(newPath)
                return False
            else:
                self._outputMsg("File " + self._getFullSourcePath() +\
                                " changed when running system preprocessor," +\
                                " new file is " + newPath)
                return newPath
        except:
            print("YogiMPI encountered an error preprocessing Fortran source.")
            raise

    ## Preprocesses a Fortran file, changing MPI_ to YogiFortran_ wherever
    #  used. A temporary file is created with the new contents.
    #  Returns True on False as to whether the file was ever changed.
    def preprocessFortran(self, inPlace=False):
        changedFile = False
        self._outputMsg("Preprocessing Fortran source " +\
                        self._getFullSourcePath())
        with open(self._getFullSourcePath(), 'r') as f:
           firstRead = f.read()
           f.seek(0)
           origLines = f.readlines()
           if '#include' in firstRead:
               neededCPP = self._callSystemPreprocessor()
           else:
               neededCPP = False

        if neededCPP:
            startFile = neededCPP
            fileHandle = open(startFile, 'r')
            rawFile = fileHandle.readlines()
            fileHandle.close()
        else:
            rawFile = origLines
            startFile = self._getFullSourcePath()

        fixedForm = self._isFixedForm(startFile)
        if neededCPP:
            os.remove(neededCPP)

        i = 0
        while i < len(rawFile):
            line = rawFile[i]
            if self._isFortranIgnoreLine(line, fixedForm):
                i += 1
                continue
            oldLine = line

            for aRegex in self.const_type_regexes:
                # Run through all the loaded MPI regular expressions.
                line = aRegex.sub(r"\g<1>YOG_\g<2>\g<3>", line)

            for aRegex in self.const_regexes:
                # Run through all the loaded MPI regular expressions.
                line = aRegex.sub(r"\g<1>YOG_\g<2>\g<3>", line)

            for aRegex in self.func_regexes:
                # Run through all the loaded MPI regular expressions.
                line = aRegex.sub(r"\g<1>YOG_\g<2>\g<3>", line)

            for aRegex in self.time_regexes:
                # Run through all the loaded MPI regular expressions.
                line = aRegex.sub(r"\g<1>YOG_\g<2>\g<3>", line)

            # Substitute "use yogimpi" for "use mpi" where applicable.
            line = YogiMPIWrapper.useMPIRegEx.sub(r"\g<1>use yogimpi\g<2>",
                                                  line)

            # Detect if the line changed, and if so, handle fixed-format
            # problems and/or bumping the line counter.
            if oldLine != line:
                rawFile[i] = line
                #if fixedForm:
                    # i can be modified if added lines should be skipped.
                    #i = self._checkFixedLine(rawFile, i)
                #else:
                #    i += 1
                i += 1
                changedFile = True
            else:
                i += 1

        if not changedFile:
            self._outputMsg("File " + self._getFullSourcePath() +\
                            " was unchanged.")
        else:
            fileExtension = self._getExtension(self.sourceFile)
            if inPlace:
                oldFile = self._getFullSourcePath()
                timestr = time.strftime("%Y%m%d-%H%M%S")
                backupPath = oldFile + '.yogi_orig_' + timestr
                os.rename(oldFile, backupPath)
                self._outputMsg("File " + oldFile + " was changed in place," +\
                                " backup is " + backupPath)
                newFile = open(oldFile, 'w')
                newFile.writelines(rawFile)
                newFile.close()
            else:
                fileExtension = self._getExtension(self.sourceFile)
                uniqueStr = self._makeTempFilename(self._getFullSourcePath())
                filePrefix = 'yogiF_' + uniqueStr
                newFile, self.newPath = tempfile.mkstemp(prefix=filePrefix,
                                                          suffix=fileExtension)
                os.close(newFile)
                newFile = open(self.newPath, 'w')
                self._outputMsg("File " + self._getFullSourcePath() +
                                " was changed, new file is " + self.newPath)
                newFile.writelines(rawFile)
                newFile.close()

        return changedFile

    ## Passes through doing any YogiMPI flags and acts only as the underlying
    #  serial compiler.
    def passThrough(self):
        self.argArray[0] = self.compilerName
        self.argArray.remove('--no-yogi')
        self._outputMsg("Final compile string: " + self._getCallString())
        self.rc = subprocess.call(self._getCallString(), shell=True)

    def _doWrap(self):
        for i in range(len(self.argArray)):
            anOpt = self.argArray[i]
            if anOpt in YogiMPIWrapper.notLinkingOpts:
                # See if this command is linking, which means we have to add
                # library flags as well as extra include flags.
                self.isLinking = False
            elif self._isSourceType(anOpt, self.compilerLang, curIndex=i):
                # Find the source file to preprocess, if any.
                self.setFile(anOpt, i)
            elif anOpt == '-o':
                # If there was an output file name, use what was specified.
                self.namesOutput = True

        if self.preprocessOnly:
            self.preprocessFortran(inPlace=True)
        else:
            self._changeArgs()
            self._outputMsg("Final compile string: " + self._getCallString())
            self.rc = subprocess.call(self._getCallString(), shell=True)
            if self.newPath and (not self.debug):
                os.remove(self.newPath)
