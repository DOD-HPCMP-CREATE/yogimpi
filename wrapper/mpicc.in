#!/usr/bin/env python

import os
import sys
import subprocess
import tempfile

class YogiMPIWrapper(object):
    prefixDir = "@INSTALLDIR@"
    cCompiler = "@SERIALCCOMPILER@"

    cExtensions = [ '.c' ]
    notLinkingOpts = [ '-c', '-S', '-E', '-M', '-MM' ]
    
    def _isCSource(self, inputFile):
        for cExt in YogiMPIWrapper.cExtensions:
            if inputFile.endswith(cExt):
                return True
        return False
        
    def __init__(self):
        self.argArray = list(sys.argv)
        self.sourceDir = ''
        self.sourceFile = None
        self.sourceLocation = None
        self.isLinking = True
        self.rc = 0
        diagOptions = [ '-h', '-help', '-show', '--help', '--version',
                        '-compile_info', '-link_info' ]

        diagMode = False
        for anArg in self.argArray:
            if anArg in diagOptions:
                diagMode = True
        if diagMode:
            self._showCompilerString()
        else:
            self.doWrap()

    def getRC(self):
        return self.rc

    def _showCompilerString(self):
        self.compString = YogiMPIWrapper.cCompiler
        self.compString += ' -I' + YogiMPIWrapper.prefixDir + '/include' +\
                           ' -DYOGIMPI_ENABLED'
        self.compString += ' -L' + YogiMPIWrapper.prefixDir + '/lib' +\
                           ' -lyogimpi'
        print self.compString

    def _outputMsg(self, message):
        if 'YMPI_COMPILER_DEBUG' in os.environ:
            if int(os.environ['YMPI_COMPILER_DEBUG']) == 1:
                print message
        
    def setFile(self, inputFile, argLocation):
        if self.sourceFile is not None:
            raise ValueError("Error: source file is already set to " +\
                              self.sourceFile)
        self.sourceDir = os.path.dirname(inputFile)
        self.sourceFile = os.path.basename(inputFile)
        self.sourceLocation = argLocation

    def _changeArgs(self):
        self.argArray[0] = YogiMPIWrapper.cCompiler
        if self.isLinking:
            self.argArray.append('-L' + YogiMPIWrapper.prefixDir + '/lib' +\
                                 ' -lyogimpi')
        if self.sourceFile:
            self.argArray.insert(self.sourceLocation,
                                 '-I' + YogiMPIWrapper.prefixDir + '/include')
        
    def _getCallString(self):
        callString = ''
        for anArg in self.argArray:
            callString += anArg + ' '
        return callString
        
    def _printCommand(self):
        sys.stdout.write(self._getCallString() + '\n')
                     
    def doWrap(self):
        for i in range(len(self.argArray)):
            anOpt = self.argArray[i]
            if anOpt in YogiMPIWrapper.notLinkingOpts:
                # See if this command is linking, which means we have to add 
                # library flags as well as extra include flags.
                self.isLinking = False
            elif self._isCSource(anOpt):
                # Find the source file to preprocess, if any.
                self.setFile(anOpt, i)

        self._changeArgs()
        self._outputMsg("Final compile string: " + self._getCallString())
        self.rc = subprocess.call(self._getCallString(), shell=True)
        
if __name__ == "__main__":
    thisWrapper = YogiMPIWrapper()
    exit(thisWrapper.getRC())
