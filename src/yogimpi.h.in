/*
                                  COPYRIGHT

 The following is a notice of limited availability of the code, and disclaimer
 which must be included in the prologue of the code and in all source listings
 of the code.

 Copyright Notice
  + 2002 University of Chicago
  + 2016 Stephen Adamec

 Permission is hereby granted to use, reproduce, prepare derivative works, and
 to redistribute to others.  This software was authored by:

 Mathematics and Computer Science Division
 Argonne National Laboratory, Argonne IL 60439

 (and)

 Department of Computer Science
 University of Illinois at Urbana-Champaign

 (and)

 Stephen Adamec

                              GOVERNMENT LICENSE

 Portions of this material resulted from work developed under a U.S.
 Government Contract and are subject to the following license: the Government
 is granted for itself and others acting on its behalf a paid-up, nonexclusive,
 irrevocable worldwide license in this computer software to reproduce, prepare
 derivative works, and perform publicly and display publicly.

                                    DISCLAIMER

 This computer code material was prepared, in part, as an account of work
 sponsored by an agency of the United States Government.  Neither the United
 States, nor the University of Chicago, nor any of their employees, makes any
 warranty express or implied, or assumes any legal liability or responsibility
 for the accuracy, completeness, or usefulness of any information, apparatus,
 product, or process disclosed, or represents that its use would not infringe
 privately owned rights.
*/

#ifndef YOGIMPI_H
#define YOGIMPI_H
#ifdef __cplusplus
extern "C" {
#endif

@SET_VERSION@

/*
 * MPI_Status can be treated as a series of integers (as in Fortran).
 * YogiMPI stores an integer array larger than any known MPI distribution's
 * MPI_Status byte size.
 */

#define MAX_STATUS_SIZE 12

/*
 * Typedefs for opaque MPI data structures.
 */
typedef int YogiMPI_Group;
typedef int YogiMPI_Comm;
typedef int YogiMPI_Datatype;
typedef int YogiMPI_Request;
typedef int YogiMPI_Op;
typedef int YogiMPI_Info;
typedef int YogiMPI_File;
typedef int YogiMPI_Errhandler;
typedef int YogiMPI_Win;
#if YogiMPI_VERSION == 3
typedef int YogiMPI_Message;
#endif

/* MPI constants for return codes (both C and Fortran) */
#define YogiMPI_SUCCESS 0
#define YogiMPI_ERR_BUFFER 1
#define YogiMPI_ERR_COUNT 2
#define YogiMPI_ERR_TYPE 3
#define YogiMPI_ERR_TAG 4
#define YogiMPI_ERR_COMM 5
#define YogiMPI_ERR_RANK 6
#define YogiMPI_ERR_REQUEST 7
#define YogiMPI_ERR_ROOT 8
#define YogiMPI_ERR_GROUP 9
#define YogiMPI_ERR_OP 10
#define YogiMPI_ERR_TOPOLOGY 11
#define YogiMPI_ERR_DIMS 12
#define YogiMPI_ERR_ARG 13
#define YogiMPI_ERR_UNKNOWN 14
#define YogiMPI_ERR_TRUNCATE 15
#define YogiMPI_ERR_OTHER 16
#define YogiMPI_ERR_INTERN 17
#define YogiMPI_ERR_PENDING 18
#define YogiMPI_ERR_IN_STATUS 19

/* Part 2 for MPI I/O error constants */

#define YogiMPI_ERR_FILE 20
#define YogiMPI_ERR_NOT_SAME 21
#define YogiMPI_ERR_AMODE 22
#define YogiMPI_ERR_UNSUPPORTED_DATAREP 23
#define YogiMPI_ERR_UNSUPPORTED_OPERATION 24
#define YogiMPI_ERR_NO_SUCH_FILE 25
#define YogiMPI_ERR_FILE_EXISTS 26
#define YogiMPI_ERR_BAD_FILE 27
#define YogiMPI_ERR_ACCESS 28
#define YogiMPI_ERR_NO_SPACE 29
#define YogiMPI_ERR_QUOTA 30
#define YogiMPI_ERR_READ_ONLY 31
#define YogiMPI_ERR_FILE_IN_USE 32
#define YogiMPI_ERR_DUP_DATAREP 33
#define YogiMPI_ERR_CONVERSION 34
#define YogiMPI_ERR_IO 35

#define YogiMPI_ERR_INFO 36
#define YogiMPI_ERR_INFO_KEY 37
#define YogiMPI_ERR_INFO_VALUE 38
#define YogiMPI_ERR_INFO_NOKEY 39
#define YogiMPI_ERR_NAME 40
#define YogiMPI_ERR_NO_MEM 41
#define YogiMPI_ERR_PORT 42
#define YogiMPI_ERR_SERVICE 43
#define YogiMPI_ERR_SPAWN 44
#define YogiMPI_ERR_WIN 45
#define YogiMPI_ERR_KEYVAL 46
#define YogiMPI_ERR_BASE 47
#define YogiMPI_ERR_LOCKTYPE 48
#define YogiMPI_ERR_RMA_CONFLICT 49
#define YogiMPI_ERR_RMA_SYNC 50
#define YogiMPI_ERR_SIZE 51
#define YogiMPI_ERR_DISP 52
#define YogiMPI_ERR_ASSERT 53

#define YogiMPI_ERR_LASTCODE 54

/* Assorted constants (both C and Fortran) */

/* Recommended that MPI_BOTTOM be zero address */
#define YogiMPI_BOTTOM (void*)0

#define YogiMPI_PROC_NULL -2
#define YogiMPI_ROOT -6
#define YogiMPI_ANY_SOURCE -3
/* ANY_TAG should not overlap with any valid tag */
#define YogiMPI_ANY_TAG -4
/* UNDEFINED should not overlap with any valid rank */
#define YogiMPI_UNDEFINED -5
#define YogiMPI_BSEND_OVERHEAD 512
#define YogiMPI_KEYVAL_INVALID -7

/* Dist graph create constants */
#define YogiMPI_WEIGHTS_EMPTY (int*)2
#define YogiMPI_UNWEIGHTED (int*)3

/* MPI asserts for one-sided communication.  Supports bitwise OR. */
#define YogiMPI_MODE_NOCHECK 1024
#define YogiMPI_MODE_NOSTORE 2048
#define YogiMPI_MODE_NOPUT 4096
#define YogiMPI_MODE_NOPRECEDE 8192
#define YogiMPI_MODE_NOSUCCEED 16384

/* Seeking constants. */
#define YogiMPI_SEEK_SET 50
#define YogiMPI_SEEK_CUR 55
#define YogiMPI_SEEK_END 60

/* typeclasses */
#define YogiMPI_TYPECLASS_REAL 1
#define YogiMPI_TYPECLASS_INTEGER 2
#define YogiMPI_TYPECLASS_COMPLEX 3

/* MPI I/O permission modes.  Supports bitwise ops. 2*/
#define YogiMPI_MODE_RDONLY 2
#define YogiMPI_MODE_RDWR 8
#define YogiMPI_MODE_WRONLY 4
#define YogiMPI_MODE_CREATE 1
#define YogiMPI_MODE_EXCL 64
#define YogiMPI_MODE_DELETE_ON_CLOSE 16
#define YogiMPI_MODE_UNIQUE_OPEN 32
#define YogiMPI_MODE_SEQUENTIAL 256
#define YogiMPI_MODE_APPEND 128

/* Special displacement constant for certain sequential files. */
#define YogiMPI_DISPLACEMENT_CURRENT -54278278

/* MPI_Info have key and value length constants.  Pick conservative values
   that accommodate OpenMPI and MPICH derivatives. */
#define YogiMPI_MAX_INFO_KEY 32
#define YogiMPI_MAX_INFO_VAL 256

/* Subarray and darray constructor constants.  Mimics the MPICH header file */
#define YogiMPI_ORDER_C              56
#define YogiMPI_ORDER_FORTRAN        57
#define YogiMPI_DISTRIBUTE_BLOCK    121
#define YogiMPI_DISTRIBUTE_CYCLIC   122
#define YogiMPI_DISTRIBUTE_NONE     123
#define YogiMPI_DISTRIBUTE_DFLT_DARG -49767

/* The MPI-standard requires that the user provides an array of at least the
 * size equal to MAX_PROCESSOR_NAME.
 * However, YogiMPI will always return a null-terminated string. Therefore the
 * array has maximally MAX_PROCESSOR_NAME-1 useful characters. A
 * null-terminator will thus be at the index MAX_PROCESSOR_NAME-1 or before.
 * If the underlying MPI implementation returns strings that are longer than
 * YogiMPI_MAX_PROCESSOR_NAME-1, the string will be truncated.
 */
#define YogiMPI_MAX_PROCESSOR_NAME 32
#define YogiMPI_MAX_ERROR_STRING 32
#define YogiMPI_MAX_PORT_NAME 512
#define YogiMPI_MAX_OBJECT_NAME 64
#define YogiMPI_MAX_DATAREP_STRING 64

/* Elementary datatypes (C) */
#define YogiMPI_CHAR 1
#define YogiMPI_SHORT 2
#define YogiMPI_INT 3
#define YogiMPI_LONG 4
#define YogiMPI_UNSIGNED_CHAR 5
#define YogiMPI_UNSIGNED_SHORT 6
#define YogiMPI_UNSIGNED 7
#define YogiMPI_UNSIGNED_LONG 8
#define YogiMPI_FLOAT 9
#define YogiMPI_DOUBLE 10
#define YogiMPI_LONG_DOUBLE 11
#define YogiMPI_BYTE 12
#define YogiMPI_PACKED 13

/* Datatypes for reduction functions (C) */

#define YogiMPI_FLOAT_INT 14
#define YogiMPI_DOUBLE_INT 15
#define YogiMPI_LONG_INT 16
#define YogiMPI_2INT 17
#define YogiMPI_SHORT_INT 18
#define YogiMPI_LONG_DOUBLE_INT 19

/* Optional datatypes (C) */
#define YogiMPI_LONG_LONG_INT 20
#define YogiMPI_INT32_T 21
#define YogiMPI_INT64_T 22

/* Make LONG_LONG a LONG_LONG_INT */
#define YogiMPI_LONG_LONG 20

/* Non-standard datatypes that are often in MPI implementations,
   so include them here.  Some of these are normally Fortran-only, but
   a few misbehaving (but required) C applications demand their presence. */
#define YogiMPI_COMPLEX 23
#define YogiMPI_DOUBLE_COMPLEX 24
#define YogiMPI_LOGICAL 25
#define YogiMPI_2REAL 26
#define YogiMPI_2DOUBLE_PRECISION 27
#define YogiMPI_2INTEGER 28
#define YogiMPI_INTEGER1 29
#define YogiMPI_INTEGER2 30
#define YogiMPI_INTEGER4 31
#define YogiMPI_INTEGER8 32
#define YogiMPI_REAL4 33
#define YogiMPI_REAL8 34
#define YogiMPI_UNSIGNED_LONG_LONG 35

/* Some Fortran-only definitions that end up matching byte-sizes with standard
   C types (at least on standard x86_64) */
#define YogiMPI_CHARACTER 1
#define YogiMPI_INTEGER 3
#define YogiMPI_REAL 33
#define YogiMPI_DOUBLE_PRECISION 10

/* Special datatypes for constructing derived datatypes */
#define YogiMPI_LB 36
#define YogiMPI_UB 37

#define YogiMPI_SIGNED_CHAR 38
#define YogiMPI_WCHAR 39

/* C99 types */
#define YogiMPI_C_BOOL 40
#define YogiMPI_C_FLOAT_COMPLEX 41
#define YogiMPI_C_COMPLEX 42
#define YogiMPI_C_DOUBLE_COMPLEX 43
#define YogiMPI_C_LONG_DOUBLE_COMPLEX 44

/* MPI 2.2 types that are needed for MPI I/O */
#define YogiMPI_AINT 45
#define YogiMPI_OFFSET 46

/* These should probably be with the above "Optional datatypes (C)", */
/* but they were added later so putting them here to avoid reordering the list. */
#define YogiMPI_INT8_T 47
#define YogiMPI_INT16_T 48

/* reserved communicators (C and Fortran) */
#define YogiMPI_COMM_WORLD 1
#define YogiMPI_COMM_SELF 2

/* results of communicator and group comparisons */
#define YogiMPI_IDENT 0
#define YogiMPI_CONGRUENT 1
#define YogiMPI_SIMILAR 2
#define YogiMPI_UNEQUAL 3

/* environmental inquiry keys (C and Fortran) */
#define YogiMPI_TAG_UB -8
#define YogiMPI_IO -9
#define YogiMPI_HOST -10
#define YogiMPI_WTIME_IS_GLOBAL -11

/* Predefined MPI_Win attributes */
#define YogiMPI_WIN_BASE -12
#define YogiMPI_WIN_SIZE -13
#define YogiMPI_WIN_DISP_UNIT -14

/* collective operations (C and Fortran) */
#define YogiMPI_MAX 1
#define YogiMPI_MIN 2
#define YogiMPI_SUM 3
#define YogiMPI_PROD 4
#define YogiMPI_MAXLOC 5
#define YogiMPI_MINLOC 6
#define YogiMPI_BAND 7
#define YogiMPI_BOR 8
#define YogiMPI_BXOR 9
#define YogiMPI_LAND 10
#define YogiMPI_LOR 11
#define YogiMPI_LXOR 12
#define YogiMPI_REPLACE 13
#if YogiMPI_VERSION == 3
#define YogiMPI_NO_OP 14
#endif

/* Null handles */
#define YogiMPI_GROUP_NULL 0
#define YogiMPI_COMM_NULL 0
#define YogiMPI_DATATYPE_NULL 0
#define YogiMPI_REQUEST_NULL 0
#define YogiMPI_OP_NULL 0
#define YogiMPI_INFO_NULL 0
#define YogiMPI_FILE_NULL 0
#define YogiMPI_ERRHANDLER_NULL 0
#define YogiMPI_WIN_NULL 0
#if YogiMPI_VERSION == 3
#define YogiMPI_MESSAGE_NULL 0
#endif

/* Reserved MPI_Message values */
#if YogiMPI_VERSION == 3
#define YogiMPI_MESSAGE_NO_PROC 1
#endif

/* Predefined error handlers */
#define YogiMPI_ERRORS_ARE_FATAL 1
#define YogiMPI_ERRORS_RETURN 2

/* Empty group */
#define YogiMPI_GROUP_EMPTY 1

/* Version info */
#define YogiMPI_MAX_LIBRARY_VERSION_STRING 8192

/* For supported thread levels */
#define YogiMPI_THREAD_SINGLE 0
#define YogiMPI_THREAD_FUNNELED 1
#define YogiMPI_THREAD_SERIALIZED 2
#define YogiMPI_THREAD_MULTIPLE 3

/* Lock type constants */
#define YogiMPI_LOCK_EXCLUSIVE  234
#define YogiMPI_LOCK_SHARED     235

/* Topology test constants */
#define YogiMPI_GRAPH 1
#define YogiMPI_CART 2
#define YogiMPI_DIST_GRAPH 3

/* MPI Combiner state constants */
#define YogiMPI_COMBINER_NAMED 1
#define YogiMPI_COMBINER_DUP 2
#define YogiMPI_COMBINER_CONTIGUOUS 3
#define YogiMPI_COMBINER_VECTOR 4
#define YogiMPI_COMBINER_HVECTOR_INTEGER 5
#define YogiMPI_COMBINER_HVECTOR 6
#define YogiMPI_COMBINER_INDEXED 7
#define YogiMPI_COMBINER_HINDEXED_INTEGER 8
#define YogiMPI_COMBINER_HINDEXED 9
#define YogiMPI_COMBINER_INDEXED_BLOCK 10
#define YogiMPI_COMBINER_STRUCT_INTEGER 12
#define YogiMPI_COMBINER_STRUCT 13
#define YogiMPI_COMBINER_SUBARRAY 14
#define YogiMPI_COMBINER_DARRAY 15
#define YogiMPI_COMBINER_F90_REAL 16
#define YogiMPI_COMBINER_F90_COMPLEX 17
#define YogiMPI_COMBINER_F90_INTEGER 18
#define YogiMPI_COMBINER_RESIZED 19

/* predefined types for MPI_Comm_split_type */
#define YogiMPI_COMM_TYPE_SHARED    1

/* Don't return error codes */
#define YogiMPI_ERRCODES_IGNORE ((int *) 0)

/* Define structure for MPI_Status - hide real object inside as int array */
struct YogiMPI_Status
{
  int MPI_SOURCE;
  int MPI_TAG;
  int MPI_ERROR;
  int realStatus[MAX_STATUS_SIZE];
};

typedef struct YogiMPI_Status YogiMPI_Status;
static YogiMPI_Status * const YogiMPI_STATUS_IGNORE = 0;
static YogiMPI_Status * const YogiMPI_STATUSES_IGNORE = 0;

/*
 * MPI_Aint is implementation dependent.  Pick a long long for it locally and
 * then cast to the actual type within the function.  In some instances
 * casting may not be necessary, which can be determined at runtime.
 */
typedef long long YogiMPI_Aint;

/* MPI_Offset is implementation dependent.  Pick a long long for it locally and
 * then cast to the actual type within the function.  In some instances
 * casting may not be necessary, which can be determined at runtime.
 */
typedef long long YogiMPI_Offset;

/* MPI_Fint is implementation dependent.  Pick an int for it locally and
 * then cast to the actual type within the function.  In some instances
 * casting may not be necessary, which can be determined at runtime.
 */
typedef int YogiMPI_Fint;

#if YogiMPI_VERSION == 3

/* MPI_Count is implementation dependent. Pick a long long int for it locally
 * and then cast to the actual type within the function.  In some instances
 * casting may not be necessary, which can be determined at runtime.
 */
typedef long long YogiMPI_Count;

#endif

static void * const YogiMPI_IN_PLACE = (void *)-1;

/* Prototype function pointers for MPI. */
typedef void YogiMPI_User_function(void *invec, void *inoutvec,
                               int *len, YogiMPI_Datatype *datatype);

/* Note that we don't define extra stuff like other MPI implementations.
 * This gets converted internally to the implementation's varargs function
 * pointer version.
 */
typedef void YogiMPI_Comm_errhandler_function(YogiMPI_Comm *, int *);

typedef int YogiMPI_Copy_function(YogiMPI_Comm oldcomm, int keyval,
                                  void *extra_state, void *attribute_val_in,
                                  void *attribute_val_out, int *flag);

typedef int YogiMPI_Delete_function(YogiMPI_Comm comm, int keyval,
                                    void *attribute_val, void *extra_state);

typedef void YogiMPI_Handler_function(YogiMPI_Comm *, int *, ... );

typedef int YogiMPI_Type_copy_attr_function(YogiMPI_Datatype, int, void *,
                                            void *, void *, int *);

typedef int YogiMPI_Type_delete_attr_function(YogiMPI_Datatype, int, void *,
                                              void *);

typedef int YogiMPI_Win_copy_attr_function(YogiMPI_Win, int, void *, void *,
                                           void *, int *);

typedef int YogiMPI_Win_delete_attr_function(YogiMPI_Win, int, void *, void *);

typedef void YogiMPI_File_errhandler_function(YogiMPI_File *, int *, ...);

typedef void YogiMPI_Win_errhandler_function(YogiMPI_Win *, int *, ...);

typedef int YogiMPI_Grequest_cancel_function(void *, int);

typedef int YogiMPI_Grequest_free_function(void *);

typedef int YogiMPI_Grequest_query_function(void *, YogiMPI_Status *);

typedef int YogiMPI_Datarep_conversion_function(void *, YogiMPI_Datatype, int,
                                                void *, YogiMPI_Offset, void *);

typedef int YogiMPI_Datarep_extent_function(YogiMPI_Datatype datatype,
                                            YogiMPI_Aint *, void *);

typedef int YogiMPI_Comm_copy_attr_function(YogiMPI_Comm oldcomm,
                                            int comm_keyval,
                                            void *extra_state,
                                            void *attribute_val_in,
                                            void *attribute_val_out, int *flag);

typedef int YogiMPI_Comm_delete_attr_function(YogiMPI_Comm comm,
                                              int comm_keyval,
                                              void *attribute_val,
                                              void *extra_state);

#define YogiMPI_CONVERSION_FN_NULL ((MPI_Datarep_conversion_function *)0)
#define YogiMPI_NULL_COPY_FN   ((YogiMPI_Copy_function *)0)
#define YogiMPI_DUP_FN  ((YogiMPI_Copy_function *)-1)
#define YogiMPI_NULL_DELETE_FN ((YogiMPI_Delete_function *)0)
#define YogiMPI_COMM_NULL_COPY_FN   ((YogiMPI_Comm_copy_attr_function *)0)
#define YogiMPI_COMM_DUP_FN  ((YogiMPI_Comm_copy_attr_function *)-1)
#define YogiMPI_COMM_NULL_DELETE_FN ((YogiMPI_Comm_delete_attr_function *)0)
#define YogiMPI_WIN_NULL_COPY_FN ((YogiMPI_Win_copy_attr_function*)0)
#define YogiMPI_WIN_NULL_DELETE_FN ((YogiMPI_Win_delete_attr_function*)0)
#define YogiMPI_WIN_DUP_FN   ((YogiMPI_Win_copy_attr_function*)MPI_DUP_FN)

/* Until we properly use lambdas and do auto-magic with function pointers,
   users must doctor their own functions that are supplied to YogiMPI. The
   below perform common tasks used in the functions to convert MPI arguments.
*/

int Yogi_ResolveErrorCode(int *error);
YogiMPI_Datatype Yogi_ResolveDatatype(void *input_pointer);
YogiMPI_Comm Yogi_ResolveComm(void *input_pointer);
YogiMPI_Offset Yogi_ResolveOffset(void *input_pointer);
YogiMPI_Win Yogi_ResolveWin(void *input_pointer);
YogiMPI_File Yogi_ResolveFile(void *input_pointer);
YogiMPI_Aint Yogi_ResolveAint(void *input_pointer);

/* A couple of functions to take Fortran MPI objects and yogify them. */
YogiMPI_Comm Yogi_ResolveFortranComm(int fortran_comm);
YogiMPI_Group Yogi_ResolveFortranGroup(int fortran_group);

int YogiMPI_Comm_spawn(const char *command, char *argv[], int maxprocs, YogiMPI_Info info, int root, YogiMPI_Comm comm, YogiMPI_Comm *intercomm, int array_of_errcodes[]);

int YogiMPI_Init(int* argc, char ***argv);

int YogiMPI_Init_thread(int* argc, char*** argv, int required, int* provided);

int YogiMPI_Error_class(int errorcode, int* errorclass);

int YogiMPI_Error_string(int errorcode, char* string, int* resultlen);

int YogiMPI_Finalize(void);

int YogiMPI_Get_processor_name(char* name, int* resultlen);

int YogiMPI_Type_get_contents(YogiMPI_Datatype datatype, int max_integers,
                              int max_addresses, int max_datatypes,
                              int array_of_integers[],
                              YogiMPI_Aint array_of_addresses[],
                              YogiMPI_Datatype array_of_datatypes[]);

int YogiMPI_Type_create_darray(int size, int rank, int ndims, int array_of_gsizes[], int array_of_distribs[], int array_of_dargs[], int array_of_psizes[], int order, YogiMPI_Datatype oldtype, YogiMPI_Datatype* newtype);

double YogiMPI_Wtick(void);

double YogiMPI_Wtime(void);

/* Converter functions between Fortran and C - really not needed since we
   have a single ABI, but provided. */
YogiMPI_Fint YogiMPI_Comm_c2f(YogiMPI_Comm comm);
YogiMPI_Comm YogiMPI_Comm_f2c(YogiMPI_Fint comm);
YogiMPI_Fint YogiMPI_Errhandler_c2f(YogiMPI_Errhandler err);
YogiMPI_Errhandler YogiMPI_Errhandler_f2c(YogiMPI_Fint err);
YogiMPI_Fint YogiMPI_File_c2f(YogiMPI_File file);
YogiMPI_File YogiMPI_File_f2c(YogiMPI_Fint file);
YogiMPI_Fint YogiMPI_Group_c2f(YogiMPI_Group group);
YogiMPI_Group YogiMPI_Group_f2c(YogiMPI_Fint group);
YogiMPI_Fint YogiMPI_Info_c2f(YogiMPI_Info info);
YogiMPI_Info YogiMPI_Info_f2c(YogiMPI_Fint info);
YogiMPI_Fint YogiMPI_Op_c2f(YogiMPI_Op op);
YogiMPI_Op YogiMPI_Op_f2c(YogiMPI_Fint op);
YogiMPI_Fint YogiMPI_Request_c2f(YogiMPI_Request request);
YogiMPI_Request YogiMPI_Request_f2c(YogiMPI_Fint request);
int YogiMPI_Status_f2c(const YogiMPI_Fint *f_status, YogiMPI_Status *c_status);
int YogiMPI_Status_c2f(const YogiMPI_Status *c_status, YogiMPI_Fint *f_status);
YogiMPI_Fint YogiMPI_Type_c2f(YogiMPI_Datatype datatype);
YogiMPI_Datatype YogiMPI_Type_f2c(YogiMPI_Fint datatype);
YogiMPI_Fint YogiMPI_Win_c2f(YogiMPI_Win win);
YogiMPI_Win YogiMPI_Win_f2c(YogiMPI_Fint win);


/* Begin function prototypes. */
@YOGI_PROTOTYPES@
/* End function prototypes. */

#ifdef __cplusplus
}
#endif
#endif /* YOGIMPI_H */
