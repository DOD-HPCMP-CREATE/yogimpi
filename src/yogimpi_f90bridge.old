/* File to bind YogiMPI C functions to Fortran. */

#include "yogimpi.h"

/* Access common block data from Fortran to determine the address of the
   MPI_STATUS_IGNORE and MPI_STATUSES_IGNORE. */
extern struct {
  YogiMPI_Status fignore;
} ympiscalar_; 

extern struct {
  YogiMPI_Status fignore;
} ympiarray_; 

/* Compares an integer pointer from Fortran to those defined in common blocks
   for YogiMPI_STATUS_IGNORE and YogiMPI_STATUSES_IGNORE in Fortran.  Returns
   true if either match pointer address, otherwise returns false. */
static int check_to_ignore(int *raw_status) {
    if ((void *)raw_status == (void *)&(ympiscalar_.fignore)) return 1;
    if ((void *)raw_status == (void *)&(ympiarray_.fignore)) return 1;
    return 0;
}

static char * null_terminate(char *fString, size_t slen) {
    char * returnString = (char *)malloc(slen + 1);
    strncpy(returnString, fString, slen);
    returnString[slen] = '\0';
    return returnString;
}		

void YOGIMPI_GET_PROCESSOR_NAME(char *name, int *resultlen, int *ierror,
                                int name_len) {
    char *interimName = null_terminate(name, name_len);
    *ierror = YogiMPI_Get_processor_name(interimName, resultlen);
    if (*resultlen > name_len) *resultlen = name_len;
    strncpy(name, interimName, name_len);
}

void YOGIMPI_FILE_OPEN(int *comm, char *filename, int *amode, int *info, 
                       int *fh, int *ierror, int filename_len) {
    *ierror = YogiMPI_File_open(*comm, null_terminate(filename, filename_len),
                                *amode, *info, fh);
}

void YOGIMPI_FILE_SET_VIEW(int *fh, long long int *disp, int *etype, 
                           int *filetype, char *datarep, int *info,
                           int *ierror, int datarep_len) { 
    *ierror = YogiMPI_File_set_view(*fh, *disp, *etype, *filetype, 
                                    null_terminate(datarep, datarep_len), 
                                    *info);
}

void YOGIMPI_INFO_SET(int *info, char *key, char *value, int *ierror, 
                      int key_len, int value_len) {
    *ierror = YogiMPI_Info_set(*info, null_terminate(key, key_len),
                               null_terminate(value, value_len));
}

void YOGIMPI_FILE_DELETE(char* filename, int *info, int *ierror,
                         int filename_len) {
    char *interimName = null_terminate(filename, filename_len);
    *ierror = YogiMPI_File_delete(interimName, *info);
}
