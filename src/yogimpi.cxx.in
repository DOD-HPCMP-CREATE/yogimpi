/*
                                  COPYRIGHT
 
 The following is a notice of limited availability of the code, and disclaimer
 which must be included in the prologue of the code and in all source listings
 of the code.
 
 Copyright Notice
  + 2002 University of Chicago
  + 2016 Stephen Adamec

 Permission is hereby granted to use, reproduce, prepare derivative works, and
 to redistribute to others.  This software was authored by:
 
 Mathematics and Computer Science Division
 Argonne National Laboratory, Argonne IL 60439
 
 (and)
 
 Department of Computer Science
 University of Illinois at Urbana-Champaign

 (and)

 Stephen Adamec
 
                              GOVERNMENT LICENSE
 
 Portions of this material resulted from work developed under a U.S.
 Government Contract and are subject to the following license: the Government
 is granted for itself and others acting on its behalf a paid-up, nonexclusive,
 irrevocable worldwide license in this computer software to reproduce, prepare
 derivative works, and perform publicly and display publicly.
  
                                    DISCLAIMER
  
 This computer code material was prepared, in part, as an account of work
 sponsored by an agency of the United States Government.  Neither the United
 States, nor the University of Chicago, nor any of their employees, makes any
 warranty express or implied, or assumes any legal liability or responsibility
 for the accuracy, completeness, or usefulness of any information, apparatus,
 product, or process disclosed, or represents that its use would not infringe
 privately owned rights.
*/

#include <yogimpi.h>
#include <mpi.h>
#include "YogiManager.h"
#include <stdlib.h>
#include <string.h>
#include <unistd.h> /* for hostname */

/* Copy an MPI_Status pointer into a YogiMPI_Status object.
 * @arg source The MPI_Status memory address from which to copy.
 * @arg dest The YogiMPI_Status memory address into which copy is placed.
 */
static void mpi_status_to_yogi(MPI_Status *source, YogiMPI_Status *dest) {
    dest->MPI_TAG = source->MPI_TAG;
    dest->MPI_SOURCE = source->MPI_SOURCE;
    dest->MPI_ERROR = source->MPI_ERROR;
    /* If this isn't the same address, force a memcpy */
    if ((void *)dest->realStatus != (void *)source) {
        memcpy((void *)dest->realStatus, (void *)source, sizeof(MPI_Status));
    }
}

/* Retrieve the real MPI_Status pointer from a YogiMPI_Status object */
static MPI_Status * yogi_status_to_mpi(YogiMPI_Status *source)
{
    /* This will grab the number of bytes needed.  We don't care about
     * structure padding since this area is never directly accessed by us.
     * It is ensured to be larger than we need.
    */
    return (MPI_Status *)&source->realStatus[0];
}

static int yogi_amode_to_mpi(int amode) {
    switch(amode) {
    case YogiMPI_MODE_RDONLY: 
	    return MPI_MODE_RDONLY;
	    break;
    case YogiMPI_MODE_RDWR:
	    return MPI_MODE_RDWR;
	    break;
    case YogiMPI_MODE_WRONLY:
	    return MPI_MODE_WRONLY;
      	break;
    case YogiMPI_MODE_CREATE: 
	    return MPI_MODE_CREATE;
	    break;
    case YogiMPI_MODE_EXCL: 
	    return MPI_MODE_EXCL;
        break;
    case YogiMPI_MODE_DELETE_ON_CLOSE: 
	    return MPI_MODE_DELETE_ON_CLOSE;
	    break;
    case YogiMPI_MODE_UNIQUE_OPEN: 
	    return MPI_MODE_UNIQUE_OPEN;
	    break;
    case YogiMPI_MODE_SEQUENTIAL: 
	    return MPI_MODE_SEQUENTIAL;
	    break;
    case YogiMPI_MODE_APPEND:
	    return MPI_MODE_APPEND;
	    break;
    default:
    	return amode;
    }

}

/* Convert root constants in the case of an intercommunicator. */
static int root_to_mpi(int root) {
    if (root == YogiMPI_ROOT) return MPI_ROOT;
    if (root == YogiMPI_PROC_NULL) return MPI_PROC_NULL;
    return root;
}

int YogiMPI_Init(int* argc, char ***argv)
{ 
    int mpi_err = MPI_Init(argc,argv); 
    return error_to_yogi(mpi_err);
}

int YogiMPI_Finalize() {
    int mpi_err = MPI_Finalize();
    return error_to_yogi(mpi_err);
}

double YogiMPI_Wtick() {
    return MPI_Wtick();
}

double YogiMPI_Wtime() {
    return MPI_Wtime();
}

// Begin automatically-generated function code.
@YOGI_FUNCTIONS@
// End automatically-generated function code.
