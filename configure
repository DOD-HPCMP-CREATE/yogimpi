#!/bin/bash

# Error if empty variable.
# Argument 1 - variable to check
# Argument 2 - description of variable for error message
function errorIfEmpty {
    if [[ ${1} == "" ]]; then
        echo "Error: ${2} unspecified." >&2
        exit 1
    fi
}

function makeVersion {
    echo "YOGIMPI_VERSION := $1" > Make.version
}

function showUsage {
    echo "./configure -i <install prefix>"
    echo "* Required environment variables to build YogiMPI: "
    echo "YCC - Serial C compiler to use"
    echo "YCXX - Serial C++ compiler to use"
    echo "YF90 - Serial Fortran compiler to use"
    echo "YMPICXX - Parallel C++ compiler wrapper"
    echo "* Optional environment variables: "
    echo "YDEBUG - Whether to enable YogiMPI debugging (1 for enabled)"
    echo "YVERSION - Version of MPI to support (2.1, 2.2, or 3, default is 3)"
    echo "YFAMILY - Compiler family (gnu or intel)"
    echo "YPYCMD - Python command (python2 or python3, attempts to detect if unspecified)"
    exit 0
}

# Determine version
if [[ "x${YOGIMPI_VERSION}" != "x" ]]; then
    echo "Determine version from environment variable"
    makeVersion ${YOGIMPI_VERSION}
elif [[ "x$(which git)" != "x" && -e .git ]]; then
    echo "Determine version using git"
    # Use the tag to make the version, stripping off the leading "v"
    YOGIMPI_VERSION=$(git describe --tags | sed -e '/v/s/^.//')
    makeVersion ${YOGIMPI_VERSION}
elif [[ -f "Make.version" ]]; then
    echo "Determine version using Make.version file"
    YOGIMPI_VERSION=$(cut -d ' ' -f 3 Make.version)
else
    YOGIMPI_VERSION="unknown"
    makeVersion ${YOGIMPI_VERSION}
fi
echo "YOGIMPI_VERSION=${YOGIMPI_VERSION}"

# Setup python
_python=""
if [[ ! -z $YPYCMD ]]; then
    $YPYCMD -c "x=1" > /dev/null 2>&1
    if [[ "$?" == "0" ]]; then
        _python=$YPYCMD
        echo "Setting up Python using command: $YPYCMD"
    else
        echo "Supplied python command \"YPYCMD=$YPYCMD\" does not appear to be a python"
        exit 1
    fi
else
    # Use python3 if it works, otherwise try python2
    python3 -c "x=1" > /dev/null 2>&1
    if [[ "$?" == "0" ]]; then
        _python="python3"
        echo "Setting up with Python 3."
    else
        python2 -c "x=1" > /dev/null 2>&1
        if [[ "$?" == "0" ]]; then
            _python="python2"
            echo "Setting up with Python 2."
        else
            echo "Cannot detect working version of python"
            exit 1
        fi
    fi
fi

installDir=""

while getopts ":i:h" opt; do
  case $opt in
    i)
      installDir=`readlink -f $OPTARG`
      echo "Installation directory set to: $installDir"
      ;;
    h)
      showUsage
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

cFlags=""
cxxFlags=""
fFlags=""
debugFlags=""

if [[ ! -z $YDEBUG ]]; then
    if [[ $YDEBUG == "1" ]]; then
        echo "Enabling YogiMPI debugging output."
        debugFlags="-DYOGI_DEBUG -O0 -g"
    fi
fi

if [[ ! -z $YFAMILY ]]; then
    if [[ $YFAMILY == "intel" ]]; then
        echo "Using Intel compiler family defaults for Yogi."
        cCompiler=icc
        cxxCompiler=icpc
        fortranCompiler=ifort
        cFlags="-diag-disable=10441 -wd1786"
        cxxFlags="-diag-disable=10441 -wd1786"
    elif [[ $YFAMILY == "gnu" ]]; then
        echo "Using GNU compiler family defaults for Yogi."
        cCompiler=gcc
        cxxCompiler=g++
        fortranCompiler=gfortran
        fFlags="-ffree-line-length-none"
    else
        echo "I don't recognize the $YFAMILY compiler family."
        exit 1
    fi
else
    # If the user specified individually, use these.
    cCompiler=$YCC
    cxxCompiler=$YCXX
    fortranCompiler=$YF90
fi

if [[ ! -z $YVERSION ]]; then
    if [[ $YVERSION == "3" ]]; then
        echo "Enabling MPI 3 support in YogiMPI."
        mpiMajVersion=3
        mpiMinVersion=0
    elif [[ $YVERSION == "2.1" ]]; then
        echo "Enabling MPI 2.1 support in YogiMPI."
        mpiMajVersion=2
        mpiMinVersion=1
    elif [[ $YVERSION == "2.2" ]]; then
        echo "Enabling MPI 2.2 support in YogiMPI."
        mpiMajVersion=2
        mpiMinVersion=2
    else
        echo "Unrecognized MPI version $YVERSION."
        exit 1
    fi
else
    echo "Default MPI 3 support enabled."
    mpiMajVersion=3
    mpiMinVersion=0
fi

mpiCXX=$YMPICXX

# Hardcode this value for now.
callMPI="mpirun -np"

osType=`uname`

if [[ $osType == "Darwin" ]]; then
    echo "Configuring for Mac OS X."
    libraryPathVar="DYLD_LIBRARY_PATH"
    libraryExtension="dylib"
elif [[ $osType == "Linux" ]]; then
    echo "Configuring for Linux."
    libraryPathVar="LD_LIBRARY_PATH"
    libraryExtension="so"
else
    echo "Unknown operating system, verify Make.flags manually."
fi

errorIfEmpty "$cCompiler" "C compiler"
errorIfEmpty "$cxxCompiler" "C++ compiler"
errorIfEmpty "$fortranCompiler" "Fortran compiler"
errorIfEmpty "$mpiCXX" "Parallel C++ compiler"

if [[ ${installDir} == "" ]]; then
    echo "Error: install directory unspecified." >&2
    exit 1
fi

sed -e "s|@PYTHON@|${_python}|g" \
    -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@MPICXX@|${mpiCXX}|g" \
    -e "s|@CC@|${cCompiler}|g" \
    -e "s|@SERIALC@|${cCompiler}|g" \
    -e "s|@F90@|${fortranCompiler}|g" \
    -e "s|@LIBEXTENSION@|${libraryExtension}|g" \
    -e "s|@CCOMPFLAGS@|${cFlags}|g" \
    -e "s|@CXXCOMPFLAGS@|${cxxFlags}|g" \
    -e "s|@FCOMPFLAGS@|${fFlags}|g" \
    -e "s|@DEBUGFLAGS@|${debugFlags}|g" \
    -e "s|@MPIMAJVERSION@|${mpiMajVersion}|g" \
    -e "s|@MPIMINVERSION@|${mpiMinVersion}|g" \
    Make.flags.in > Make.flags

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@CALLMPI@|${callMPI}|g" \
    -e "s|@LIBEXTENSION@|${libraryExtension}|g" \
    -e "s|@LIBPATHVAR@|${libraryPathVar}|g" \
    test/testRunner.sh.in > test/testRunner.sh

# This doesn't get installed, so keep it locally.
chmod 750 test/testRunner.sh

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@PYTHONCMD@|${_python}|g" \
    -e "s|@SERIALCCOMPILER@|${cCompiler}|g" \
    wrapper/mpicc.in > wrapper/mpicc

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@PYTHONCMD@|${_python}|g" \
    -e "s|@SERIALCXXCOMPILER@|${cxxCompiler}|g" \
    wrapper/mpicxx.in > wrapper/mpicxx

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@PYTHONCMD@|${_python}|g" \
    -e "s|@SERIALFORTRANCOMPILER@|${fortranCompiler}|g" \
    wrapper/mpifort.in > wrapper/mpifort

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@LIBPATHVAR@|${libraryPathVar}|g" \
    etc/modulefile.in > etc/modulefile

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@LIBPATHVAR@|${libraryPathVar}|g" \
    etc/yogimpi.bashrc.in > etc/yogimpi.bashrc

sed -e "s|@INSTALLDIR@|${installDir}|g" \
    -e "s|@LIBPATHVAR@|${libraryPathVar}|g" \
    etc/yogimpi.cshrc.in > etc/yogimpi.cshrc

cd wrapper
$_python configure_wrapper.py
cd ..

echo "Type make to build YogiMPI."
